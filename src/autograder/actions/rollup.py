"""
rollup.py analyzes the available JSON files generated by "grade class --by-date"
It produces a JSON file which specifies the "rolled up" score by applying 
the late penalty to each repo for each date milestone
"""

import json
from pathlib import Path
import pprint
from .util import warn, fatal

def rollup(cfg, args, dates):
    # Load up the scores from each "grade class" run
    by_student_by_suffix = {}
    for date in dates:
        path = Path('.') / f'{args.project}-{date.suffix}.json'
        try:
            with open(path) as f:
                print(path)
                repos_for_suffix = json.load(f)
                for repo_score in repos_for_suffix:
                    student = repo_score['student']
                    if by_student_by_suffix.get(student) is None:
                        by_student_by_suffix[student] = {}
                    by_student_by_suffix[student][date.suffix] = repo_score
        except FileNotFoundError:
            pass
        except Exception as e:
            fatal(str(e))

    # Accumulate the rolled-up scores into a list by student
    rolled_list = []
    for student in by_student_by_suffix:
        rolled_dict = {
            'student': student,
            'score': 0,
            'comment': ''
        }

        scores_by_suffix = by_student_by_suffix.get(student)
        if scores_by_suffix is None:
            # Student had no graded repos
            warn(f'No graded repos for student: {student}')
            continue

        rolled_score = 0
        prev_score = 0
        rolled_comment = ''
        for date in dates:
            repo_result = scores_by_suffix.get(date.suffix)
            if repo_result is None:
                # warn(f'No repo for {date.suffix} for student: {student}')
                continue
            score = scores_by_suffix[date.suffix]['score']
            comment = f'{date.suffix}: {rolled_score} + ({score} - {rolled_score}) * {date.percentage} = '
            # This is the rollup calculation
            # Use prev score to avoid penalizing a repo which hasn't changed
            if score != prev_score:
                rolled_score += (score - rolled_score) * date.percentage
            comment += f'{rolled_score}'
            print(f'{student}: {comment}')
            rolled_comment += scores_by_suffix[date.suffix]['comment'] + '\n\n' + comment + '\n\n' 
            prev_score = score
        rolled_dict['comment'] = rolled_comment
        rolled_dict['score'] = rolled_score
        rolled_list.append(rolled_dict)

    # Write the rolled up scores to a file we can upload
    try:
        # TODO: build a unique path
        outpath = Path('.') / (args.project + '-rollup.json')
        with open(outpath, 'w') as outf:
            json.dump(rolled_list, outf, indent=4, sort_keys=True)
    except Exception as e:
        fatal(str(e))
